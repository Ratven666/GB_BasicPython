# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
#
# Проверить работу исключения на реальном примере. Запрашивать у пользователя данные и
# заполнять список необходимо только числами.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована.
#     Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя,
#     например, команду «stop». При этом скрипт завершается, сформированный список с числами выводится на экран.
# Подсказка: для этого задания примем, что пользователь может вводить только числа и строки.
#     Во время ввода пользователем очередного элемента необходимо реализовать проверку типа элемента.
#     Вносить его в список, только если введено число. Класс-исключение должен не позволить
#     пользователю ввести текст (не число) и отобразить соответствующее сообщение.
#     При этом работа скрипта не должна завершаться.
import re


class MyException(ValueError):
    def __init__(self, msg):
        self.msg = msg


def input_numbers():
    """
    Ну раз это последнее ДЗ то тут можно все)

    Запрашивает числа от пользователя пока он не введет "stop"
    Принимает на ввод числа с разделитями: . и ,
    Проверяет, что разделитель в строке только один
    Понимает, что строки +,12152 или -.12 это 0.12152 или -0.12 итп
    :return: возвращает список с введенными числами
    """
    data = []
    REG_FLOAT = re.compile("^[-+]?\d+[,.]\d+$|^[,.]\d+$", re.ASCII)
    REG_SHORT_FLOAT = re.compile("^[-+]*[,.]\d+$|^[,.]\d+$", re.ASCII)
    REG_INT = re.compile("^[-+]?\d+$", re.ASCII)
    while True:
        user_input = input("Введите число (stop - для завершения): ")
        if user_input.lower() == "stop":
            break
        if REG_SHORT_FLOAT.match(user_input):
            user_input = user_input[0] + "0" + user_input[1:]
            data.append(float(user_input.replace(",", ".")))
        elif REG_FLOAT.match(user_input):
            if user_input.startswith(("+", "-")):
                user_input = user_input.replace(",", ".")
            else:
                user_input = "0" + user_input.replace(",", ".")
            data.append(float(user_input))
        elif REG_INT.match(user_input):
            data.append(int(user_input))
        else:
            try:
                raise MyException("Вы ввели не число")
            except MyException as e:
                print(e)
    return data


print(input_numbers())
