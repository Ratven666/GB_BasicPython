"""
2.Дан список:
['в', '5', 'часов', '17', 'минут', 'температура', 'воздуха', 'была', '+5', 'градусов']

Необходимо его обработать — обособить каждое целое число (вещественные не трогаем) кавычками
(добавить кавычку до и кавычку после элемента списка, являющегося числом) и
дополнить нулём до двух целочисленных разрядов:
['в', '"', '05', '"', 'часов', '"', '17', '"', 'минут', 'температура', 'воздуха', 'была', '"', '+05', '"', 'градусов']
Подумать, какое условие записать, чтобы выявить числа среди элементов списка?
Как модифицировать это условие для чисел со знаком?

Примечание:
- Задача обычной сложности: создайте новый список и заполните его нужными значениями,
включая элементы-кавычки,например: ['в', '"', '05', '"', 'часов',...] или измените существующий список,
но не добавляйте новые элементы-кавычки, кавычки сразу внесите в элемент-число, например: ['в', '"05"', 'часов',...]
- * Задача повышенной сложности: измените существующий список, и добавьте элементы-кавычки.
Эта задача намного серьезнее, чем может сначала показаться.

Сформировать из обработанного списка строку:
в "05" часов "17" минут температура воздуха была "+05" градусов
Вывести список и строку на экран. Обратите внимание на отсутствие "лишних" пробелов около кавычек.
"""

data = ['в', '5', 'часов', '17', 'минут', 'температура', 'воздуха', 'была', '+5', 'градусов']

print("id списка до изменения", id(data))
print(data)

for index, elm in enumerate(data):
    digit_flag = False
    digit_count = 0
    for char in elm:
        if char == "+" or char == "-" or char.isdigit():
            if char.isdigit():
                digit_flag = True
                digit_count += 1
        else:
            break
    if digit_flag:
        if digit_count == 1:
            if elm.startswith("+") or elm.startswith("-"):
                elm = f"\"{elm[0]}0{elm[1::]}\""
            else:
                elm = f"\"0{elm}\""
        else:
            elm = f"\"{elm}\""
    data[index] = elm

print("\nid списка после изменения", id(data))
print(data)

result_string = " ".join(data)
print("\nРезультирующая строка")
print(result_string)
